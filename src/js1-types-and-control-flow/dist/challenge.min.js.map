{"version":3,"sources":["challenge.js"],"names":["firstName","lastName","createFullName","largeNumber1","largeNumber2","findLargestNumber","console","error","addNumber1","addNumber2","addNumbers","password","findLengthOfPassword","length","thing","findType","thingType","_typeof","nameTagOption","getIsValidOnNameTag","substring","toUpperCase","stringToConvert","convertStringToNumber","parseFloat","stringWithUppercaseLetters","getHasUppercaseLetters","Array","from","forEach","element","pascalCaseVariableName","convertPascalCaseToSnakeCase","split","join","toLowerCase"],"mappings":"4iBAiBA,IAAMA,UAAY,OARlBC,SAAA,QAEAC,eAAA,WAWE,OADqBF,UAAY,IAAMC,gDAGxC,IAJME,aAAA,IAMPC,aAAA,IASaC,kBAAoB,WAC/B,OAAkBD,aAAfD,aACMA,aACcA,aAAfC,aACCA,aAEAE,QAAQC,qDAUnB,IAAMC,WAAa,GACbC,WAAa,GAENC,WAAa,WAExB,OADcF,WAAaC,0CAa7B,IAAME,SAAW,oCAEJC,qBAAuB,WAElC,OADuBD,SAASE,0DAelC,IAAMC,MAAQ,eAEDC,SAAW,WACtB,IAAMC,EAASC,QAAUH,OAEzB,OAAOE,GACL,IAAK,SANHF,IAAK,SAEEC,IAAAA,UACLC,MAAAA,mBASF,QAPJ,MAAOA,kBAWP,MAAkB,WAAdA,EARK,mBACE,WAAAA,EAUF,mBATL,YAAKA,EACL,oBACA,6DAYH,IACDE,cAAA,UAvBKC,oBAAA,WA0BP,SAAAD,cAAAE,UAAA,EAAA,KAAAF,cAAAE,UAAA,EAAA,GAAAC,cAWIH,cAAcL,OAAS,oDAe3B,IAAMS,gBAAkB,QAEXC,sBAAwB,WACnC,OAAOC,WAAWF,sEAapB,IAAMG,2BAA6B,uCAEtBC,uBAAyB,WAKpC,OAJAC,MAAMC,KAAKH,4BAA4BI,QAAQ,SAAAC,GAC7C,GAAGA,IAAYA,EAAQT,cACvB,OAAO,KAEF,yDAIT,IAAAU,uBAAA,qBAEAC,6BAAA,WAcE,OAJmBD,uBAAuBE,MAAM,aACFC,KAAK,KACNC","file":"challenge.min.js","sourcesContent":["/* This challenge is designed to test you knowledge of Types and Control Flow (If and Switch Statements) */\r\n\r\n/* \r\n  All challenges in this repository are seperated into four levels: Foundation, Intermediate, Advanced and Expert.\r\n  The expectation is to complete all Foundation level challenges, with Intermediate and upwards pushing your knowledge\r\n  and may require you to google things in order to solve them. If you find an answer online somewhere, be kind and\r\n  share it with the group!\r\n*/\r\n\r\n/* Foundation Challenges */\r\n\r\n/**\r\n * A function that programmatically concatenates two strings together with a space in between them.\r\n * This means if the string were different it would still add them together.\r\n *\r\n * @returns {string} John Smith\r\n */\r\nconst firstName = \"John\";\r\nconst lastName = \"Smith\";\r\n\r\nexport const createFullName = () => {\r\n  const returnString = firstName + \" \" + lastName;\r\n  return returnString;\r\n  // Write your code here\r\n};\r\n\r\n/**\r\n * A function that programmatically returns the largest number.\r\n * This means if the numbers were different it would still return the largest one.\r\n *\r\n * @returns {number} the largest number\r\n */\r\nconst largeNumber1 = 100;\r\nconst largeNumber2 = 200;\r\n\r\nexport const findLargestNumber = () => {\r\n  if(largeNumber1 > largeNumber2)\r\n    return largeNumber1;\r\n  else if(largeNumber2 > largeNumber1)\r\n    return largeNumber2;\r\n  else\r\n    return console.error();\r\n  // Write your code here\r\n};\r\n\r\n/**\r\n * A function that programmatically adds two numbers together.\r\n * This means if the numbers were different it would still add them together.\r\n *\r\n * @returns {number} the sum of both numbers\r\n */\r\nconst addNumber1 = 12;\r\nconst addNumber2 = 24;\r\n\r\nexport const addNumbers = () => {\r\n  const total = addNumber1 + addNumber2;\r\n  return total;\r\n  // Write your code here\r\n};\r\n\r\n/* Intermediate Challenges */\r\n\r\n/**\r\n * A function to programmatically find the length of a string.\r\n * This means if the string was different it would still find the length.\r\n *\r\n * @returns {number} the length of the string\r\n */\r\nconst password = \"thisIsMyVeryLongPassword123456789\";\r\n\r\nexport const findLengthOfPassword = () => {\r\n  const lengthOfString = password.length;\r\n  return lengthOfString;\r\n  // Write your code here\r\n};\r\n\r\n/**\r\n * A function that programmatically tells you what the type of the variable is.\r\n * This variable was still one of the accepted types it would still output a string.\r\n * If the variable is a string output \"This is a string\"\r\n * If the variable is a number output \"This is a number\"\r\n * If the variable is a boolean output \"This is a boolean\"\r\n * If the variable is not any of those types output \"I don't know what this thing is\"\r\n *\r\n * @returns {string} This is a string\r\n */\r\nconst thing = \"I am a thing\";\r\n\r\nexport const findType = () => {\r\n  const thingType = typeof thing;\r\n\r\n  switch(thingType){\r\n    case \"string\":\r\n      return \"This is a string\";\r\n      case \"number\":\r\n      return \"This is a string\";\r\n      case \"boolean\":\r\n      return \"This is a string\";\r\n      default:\r\n      return \"Not yet defined\";\r\n  }\r\n\r\n  if (thingType === \"string\") {\r\n    return \"This is a string\";\r\n  } else if (thingType === \"number\") {\r\n    return \"This is a number\";\r\n  } else if (thingType === \"boolean\") {\r\n    return \"This is a boolean\";\r\n  } else {\r\n    return \"I don't know what this thing is\";\r\n  }\r\n  // Write your code here\r\n};\r\n\r\n/**\r\n * A function to programmatically decide if a name is suitable for a name tag.\r\n * This means it must still work even if the name is different and return something if name provided is incorrect.\r\n * Name tag rules are: The name must be less than or equal to 8 characters and begin with a capital letter.\r\n *\r\n * @returns {boolean} true || false\r\n */\r\nconst nameTagOption = \"Timothy\";\r\n\r\nexport const getIsValidOnNameTag = () => {\r\n  if(nameTagOption.substring(0,1) === nameTagOption.substring(0,1).toUpperCase()\r\n  & nameTagOption.length < 9 )\r\n  return true;\r\n  else\r\n  return false;\r\n  // Write your code here\r\n};\r\n\r\n/* Advanced Challenges */\r\n\r\n/**\r\n * A function that programmatically converts a number stored as a string to a number type.\r\n * This means if the string was different it would still convert it to a number.\r\n *\r\n * @returns {number} The number converted from the string \"32.87\" -> 32.87\r\n */\r\nconst stringToConvert = \"14.45\";\r\n\r\nexport const convertStringToNumber = () => {\r\n  return parseFloat(stringToConvert);\r\n\r\n  // Write your code here\r\n};\r\n\r\n/**\r\n * A function that uses regex to programmatically test if a string contains uppercase letters.\r\n * This means if the string was different it would still accurately return true or false.\r\n *\r\n * !!NOTE!! You should use regex to solve this problem!\r\n *\r\n * @returns {boolean} true || false\r\n */\r\nconst stringWithUppercaseLetters = \"I Am A String With Uppercase Letters\";\r\n\r\nexport const getHasUppercaseLetters = () => {\r\n  Array.from(stringWithUppercaseLetters).forEach(element => {\r\n    if(element === element.toUpperCase())\r\n    return true; \r\n  });\r\n  return false;\r\n  };  // Write your code here\r\n\r\n\r\n/* Expert Challenge */\r\n\r\n/**\r\n * A function that programmatically converts a string written in PascalCase to a string written in snake_case (lowercase with underscores).\r\n * This means if the PascalCase string changes then the function should still convert it.\r\n *\r\n * @returns {string} i_want_to_be_snake_case\r\n */\r\nconst pascalCaseVariableName = \"IWantToBeSnakeCase\";\r\n\r\nexport const convertPascalCaseToSnakeCase = () => {\r\n\r\n  const splitWords = pascalCaseVariableName.split(/(?=[A-Z])/); //split where there is a capital\r\n  const joinedWordsWithUnderscores = splitWords.join(\"_\");      //join split with underscore\r\n  const snakeCase = joinedWordsWithUnderscores.toLowerCase();   //convert everything to lower case\r\n\r\n  return snakeCase;   \r\n  // Write your code here\r\n};\r\n"]}