"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var challenge=_interopRequireWildcard(require("./challenge"));function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return _getRequireWildcardCache=function(){return e},e}function _interopRequireWildcard(e){if(e&&e.__esModule)return e;if(null===e||"object"!==_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=r?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(n,a,o):n[a]=e[a]}return n.default=e,t&&t.set(e,n),n}var createFullName=challenge.createFullName,findLargestNumber=challenge.findLargestNumber,addNumbers=challenge.addNumbers,findLengthOfPassword=challenge.findLengthOfPassword,findType=challenge.findType,getIsValidOnNameTag=challenge.getIsValidOnNameTag,convertStringToNumber=challenge.convertStringToNumber,getHasUppercaseLetters=challenge.getHasUppercaseLetters,convertPascalCaseToSnakeCase=challenge.convertPascalCaseToSnakeCase;test("createFullName() tests",function(){expect(createFullName()).toBeDefined(),expect(createFullName()).toBe("John Smith")}),test("findLargestNumber() tests",function(){expect(findLargestNumber()).toBeDefined(),expect(findLargestNumber()).toBe(200)}),test("addNumbers() tests",function(){expect(addNumbers()).toBeDefined(),expect(addNumbers()).toBe(36)}),test("findLengthOfPassword() tests",function(){expect(findLengthOfPassword()).toBeDefined(),expect(findLengthOfPassword()).toBe(33)}),test("findType() tests",function(){expect(findType()).toBeDefined(),expect(findType()).toBe("This is a string")}),test("getIsValidOnNameTag() tests",function(){expect(getIsValidOnNameTag()).toBeDefined(),expect(getIsValidOnNameTag()).toBe(!0)}),test("convertStringToNumber() tests",function(){expect(convertStringToNumber()).toBeDefined(),expect(convertStringToNumber()).toBe(14.45)}),test("getHasUppercaseLetters() tests",function(){expect(getHasUppercaseLetters()).toBeDefined(),expect(getHasUppercaseLetters()).toBe(!0)}),test("convertPascalCaseToSnakeCase() tests",function(){expect(convertPascalCaseToSnakeCase()).toBeDefined(),expect(convertPascalCaseToSnakeCase()).toBe("i_want_to_be_snake_case")});
//# sourceMappingURL=js1.test.min.js.map
