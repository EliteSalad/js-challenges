{"version":3,"sources":["js1.test.js"],"names":["challenge","_interopRequireWildcard","require","createFullName","findLargestNumber","addNumbers","findLengthOfPassword","findType","getIsValidOnNameTag","convertStringToNumber","getHasUppercaseLetters","convertPascalCaseToSnakeCase","test","expect","toBeDefined","toBe"],"mappings":"8PAAA,IAAAA,UAAAC,wBAAAC,QAAA,moBAGEC,eACAC,UADAD,eAHFC,kBAIEA,UAJFA,kBAKEC,WADAD,UACAC,WACAC,qBAFAF,UAEAE,qBACAC,SAHAH,UAGAG,SACAC,oBAJAJ,UAIAI,oBACAC,sBALAL,UAKAK,sBATyCC,uBAIzCN,UAJyCM,uBAWzCC,6BAPAP,UAOAO,6BAGFC,KAREN,yBAMEN,WAGFa,OARAN,kBAAAA,cASAM,OARAL,kBAIER,KAAAA,gBAOJY,KARED,4BAQgC,WALlCC,OAAKR,qBAADU,cACFD,OAAOV,qBAAkBW,KAAAA,OAI3BF,KAAK,qBAAA,WACHC,OAAOT,cAAAA,cACPS,OAAOT,cAAAA,KAAD,MAINS,KAAAA,+BAAA,WACAA,OAAOR,wBAAPS,cAFFD,OAAAP,wBAAAS,KAAA,MAOEF,KAAAA,mBAAOP,WAFTO,OAAAN,YAAAO,cAKAF,OAAKL,YAAAQ,KAAoB,sBAGxBH,KAHD,8BAAA,WAKAA,OAAKJ,uBAAAM,cACHD,OAAOL,uBAAuBM,MAAAA,KAIhCF,KAAK,gCAAiC,WACpCC,OAAOJ,yBAAyBK,cAChCD,OAAOJ,yBAAyBM,KAAK,SAIrCF,KAAAA,iCAAiCC,WACjCD,OAAOH,0BAA0BK,cAFnCF,OAAAH,0BAAAK,MAAA,KAOEF,KAAAA,uCAAA,WAFFA,OAAAF,gCAAAG,cAEED,OAAOF,gCAAgCI,KAAK","file":"js1.test.min.js","sourcesContent":["import * as challenge from  \"./challenge\"; //\"./solution\";\r\n\r\nconst {\r\n  createFullName,\r\n  findLargestNumber,\r\n  addNumbers,\r\n  findLengthOfPassword,\r\n  findType,\r\n  getIsValidOnNameTag,\r\n  convertStringToNumber,\r\n  getHasUppercaseLetters,\r\n  convertPascalCaseToSnakeCase\r\n} = challenge;\r\n\r\ntest(\"createFullName() tests\", () => {\r\n  expect(createFullName()).toBeDefined();\r\n  expect(createFullName()).toBe(\"John Smith\");\r\n});\r\n\r\ntest(\"findLargestNumber() tests\", () => {\r\n  expect(findLargestNumber()).toBeDefined();\r\n  expect(findLargestNumber()).toBe(200);\r\n});\r\n\r\ntest(\"addNumbers() tests\", () => {\r\n  expect(addNumbers()).toBeDefined();\r\n  expect(addNumbers()).toBe(36);\r\n});\r\n\r\ntest(\"findLengthOfPassword() tests\", () => {\r\n  expect(findLengthOfPassword()).toBeDefined();\r\n  expect(findLengthOfPassword()).toBe(33);\r\n});\r\n\r\ntest(\"findType() tests\", () => {\r\n  expect(findType()).toBeDefined();\r\n  expect(findType()).toBe(\"This is a string\");\r\n});\r\n\r\ntest(\"getIsValidOnNameTag() tests\", () => {\r\n  expect(getIsValidOnNameTag()).toBeDefined();\r\n  expect(getIsValidOnNameTag()).toBe(true);\r\n});\r\n\r\ntest(\"convertStringToNumber() tests\", () => {\r\n  expect(convertStringToNumber()).toBeDefined();\r\n  expect(convertStringToNumber()).toBe(14.45);\r\n});\r\n\r\ntest(\"getHasUppercaseLetters() tests\", () => {\r\n  expect(getHasUppercaseLetters()).toBeDefined();\r\n  expect(getHasUppercaseLetters()).toBe(true);\r\n});\r\n\r\ntest(\"convertPascalCaseToSnakeCase() tests\", () => {\r\n  expect(convertPascalCaseToSnakeCase()).toBeDefined();\r\n  expect(convertPascalCaseToSnakeCase()).toBe(\"i_want_to_be_snake_case\");\r\n});\r\n"]}