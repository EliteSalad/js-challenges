{"version":3,"sources":["js1.test.js"],"names":["createFullName","challenge","findLargestNumber","addNumbers","findLengthOfPassword","findType","getIsValidOnNameTag","convertStringToNumber","getHasUppercaseLetters","convertPascalCaseToSnakeCase","test","expect","toBeDefined","toBe"],"mappings":";;;;AAAA;;;;;;AAA2C;IAGzCA,c,GASEC,S,CATFD,c;IACAE,iB,GAQED,S,CARFC,iB;IACAC,U,GAOEF,S,CAPFE,U;IACAC,oB,GAMEH,S,CANFG,oB;IACAC,Q,GAKEJ,S,CALFI,Q;IACAC,mB,GAIEL,S,CAJFK,mB;IACAC,qB,GAGEN,S,CAHFM,qB;IACAC,sB,GAEEP,S,CAFFO,sB;IACAC,4B,GACER,S,CADFQ,4B;AAGFC,IAAI,CAAC,wBAAD,EAA2B,YAAM;AACnCC,EAAAA,MAAM,CAACX,cAAc,EAAf,CAAN,CAAyBY,WAAzB;AACAD,EAAAA,MAAM,CAACX,cAAc,EAAf,CAAN,CAAyBa,IAAzB,CAA8B,YAA9B;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,2BAAD,EAA8B,YAAM;AACtCC,EAAAA,MAAM,CAACT,iBAAiB,EAAlB,CAAN,CAA4BU,WAA5B;AACAD,EAAAA,MAAM,CAACT,iBAAiB,EAAlB,CAAN,CAA4BW,IAA5B,CAAiC,GAAjC;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,oBAAD,EAAuB,YAAM;AAC/BC,EAAAA,MAAM,CAACR,UAAU,EAAX,CAAN,CAAqBS,WAArB;AACAD,EAAAA,MAAM,CAACR,UAAU,EAAX,CAAN,CAAqBU,IAArB,CAA0B,EAA1B;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,8BAAD,EAAiC,YAAM;AACzCC,EAAAA,MAAM,CAACP,oBAAoB,EAArB,CAAN,CAA+BQ,WAA/B;AACAD,EAAAA,MAAM,CAACP,oBAAoB,EAArB,CAAN,CAA+BS,IAA/B,CAAoC,EAApC;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,kBAAD,EAAqB,YAAM;AAC7BC,EAAAA,MAAM,CAACN,QAAQ,EAAT,CAAN,CAAmBO,WAAnB;AACAD,EAAAA,MAAM,CAACN,QAAQ,EAAT,CAAN,CAAmBQ,IAAnB,CAAwB,kBAAxB;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,6BAAD,EAAgC,YAAM;AACxCC,EAAAA,MAAM,CAACL,mBAAmB,EAApB,CAAN,CAA8BM,WAA9B;AACAD,EAAAA,MAAM,CAACL,mBAAmB,EAApB,CAAN,CAA8BO,IAA9B,CAAmC,IAAnC;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,+BAAD,EAAkC,YAAM;AAC1CC,EAAAA,MAAM,CAACJ,qBAAqB,EAAtB,CAAN,CAAgCK,WAAhC;AACAD,EAAAA,MAAM,CAACJ,qBAAqB,EAAtB,CAAN,CAAgCM,IAAhC,CAAqC,KAArC;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,gCAAD,EAAmC,YAAM;AAC3CC,EAAAA,MAAM,CAACH,sBAAsB,EAAvB,CAAN,CAAiCI,WAAjC;AACAD,EAAAA,MAAM,CAACH,sBAAsB,EAAvB,CAAN,CAAiCK,IAAjC,CAAsC,IAAtC;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,sCAAD,EAAyC,YAAM;AACjDC,EAAAA,MAAM,CAACF,4BAA4B,EAA7B,CAAN,CAAuCG,WAAvC;AACAD,EAAAA,MAAM,CAACF,4BAA4B,EAA7B,CAAN,CAAuCI,IAAvC,CAA4C,yBAA5C;AACD,CAHG,CAAJ","sourcesContent":["import * as challenge from  \"./challenge\"; //\"./solution\";\r\n\r\nconst {\r\n  createFullName,\r\n  findLargestNumber,\r\n  addNumbers,\r\n  findLengthOfPassword,\r\n  findType,\r\n  getIsValidOnNameTag,\r\n  convertStringToNumber,\r\n  getHasUppercaseLetters,\r\n  convertPascalCaseToSnakeCase\r\n} = challenge;\r\n\r\ntest(\"createFullName() tests\", () => {\r\n  expect(createFullName()).toBeDefined();\r\n  expect(createFullName()).toBe(\"John Smith\");\r\n});\r\n\r\ntest(\"findLargestNumber() tests\", () => {\r\n  expect(findLargestNumber()).toBeDefined();\r\n  expect(findLargestNumber()).toBe(200);\r\n});\r\n\r\ntest(\"addNumbers() tests\", () => {\r\n  expect(addNumbers()).toBeDefined();\r\n  expect(addNumbers()).toBe(36);\r\n});\r\n\r\ntest(\"findLengthOfPassword() tests\", () => {\r\n  expect(findLengthOfPassword()).toBeDefined();\r\n  expect(findLengthOfPassword()).toBe(33);\r\n});\r\n\r\ntest(\"findType() tests\", () => {\r\n  expect(findType()).toBeDefined();\r\n  expect(findType()).toBe(\"This is a string\");\r\n});\r\n\r\ntest(\"getIsValidOnNameTag() tests\", () => {\r\n  expect(getIsValidOnNameTag()).toBeDefined();\r\n  expect(getIsValidOnNameTag()).toBe(true);\r\n});\r\n\r\ntest(\"convertStringToNumber() tests\", () => {\r\n  expect(convertStringToNumber()).toBeDefined();\r\n  expect(convertStringToNumber()).toBe(14.45);\r\n});\r\n\r\ntest(\"getHasUppercaseLetters() tests\", () => {\r\n  expect(getHasUppercaseLetters()).toBeDefined();\r\n  expect(getHasUppercaseLetters()).toBe(true);\r\n});\r\n\r\ntest(\"convertPascalCaseToSnakeCase() tests\", () => {\r\n  expect(convertPascalCaseToSnakeCase()).toBeDefined();\r\n  expect(convertPascalCaseToSnakeCase()).toBe(\"i_want_to_be_snake_case\");\r\n});\r\n"],"file":"js1.test.dev.js"}